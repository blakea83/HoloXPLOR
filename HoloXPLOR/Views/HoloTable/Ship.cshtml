@using Inventory = HoloXPLOR.Data.XML.Inventory
@using Items = HoloXPLOR.Data.XML.Spaceships
@using Vehicles = HoloXPLOR.Data.XML.Vehicles.Implementations
@using HoloXPLOR.Models.HoloTable

@model DetailModel

@{
    ViewBag.Title = "Detail";
}

@helper RenderItemCategory(String category, Dictionary<Guid, Items.Item> items)
{
    var list = items.Where(i => Model.View_ItemMap.GetValue(i.Key, null) != null).OrderByDescending(i => i.Value.ItemSize).ThenBy(i => i.Value.DisplayName.ToLocalized()).ToList();

    if (list.Count > 0)
    {
        <li>
            <h4 data-toggle="collapse" data-target="#pnl_@category.Replace(" ", "_")">@category (@list.Count)</h4>
            <ul class="collapse in" id="pnl_@category.Replace(" ", "_")">
                @foreach (var item in list)
                {
                    var isEquipped = (Model.View_ItemMap[item.Key].Inventory_Ship != null);
                    var isEquipped_Self = isEquipped && (Model.View_ItemMap[item.Key].Inventory_Ship.ID == Model.ShipID);
                    var ship = (Model.View_ItemMap[item.Key].Inventory_Ship ?? new Inventory.Ship { });

                    <li class="js-item @(isEquipped_Self ? "js-equipped" : "js-available")" @Model.View_ItemMap[item.Key].HTML_Attributes data-droppable>
                        @item.Value.DisplayName.ToLocalized() (@item.Value.ItemSize)
                        @if (ship.ID != Guid.Empty)
                        {
                            @:- @Model.GameData_ShipMap[ship.ID].DisplayName
                        }
                    </li>
                }
            </ul>
        </li>
    }
}

@helper RenderHardpoints(Inventory.Item parent, String id, Items.CategoryEnum? filter = null)
{
    List<InventoryItem> items;

    if (filter != null)
    {
        items = Model.View_CategoryLoadout[filter.Value]
            .Where(i => i.Inventory_EquippedItem == parent)
            .OrderBy(i => i.GameData_EquippedPort.Types.Select(t => t.Type).FirstOrDefault())
            .ThenByDescending(i => i.GameData_EquippedPort.MaxSize)
            .ThenByDescending(i => i.GameData_EquippedPort.MinSize)
            .ThenBy(i => i.Port_DisplayName)
            .ToList();

        if (items.Count > 0)
        {
            <h4>@filter.ToDescription()</h4>
        }
    }
    else
    {
        items = Model.View_Loadout
            .Where(i => i.Inventory_EquippedItem == parent)
            .OrderBy(i => i.GameData_EquippedPort.Types.Select(t => t.Type).FirstOrDefault())
            .ThenByDescending(i => i.GameData_EquippedPort.MaxSize)
            .ThenByDescending(i => i.GameData_EquippedPort.MinSize)
            .ThenBy(i => i.Port_DisplayName)
            .ToList();
    }

    if (items.Count > 0)
    {
        <ul id="@id" class="collapse in">
            @foreach (var item in items)
            {
                // var hardpoint = Model.GameData_ItemMap[item.EquippedItem.ID].PortParams.Items.Where(p => p.Name == item.EquippedPort.PortName).FirstOrDefault();
                var hardpoint = item.GameData_EquippedPort;
                var childId = String.Format(parent == null ? "pnl_{0}" : "pnl_{1}", item.Inventory_EquippedPort.PortName, item.Inventory_EquippedPort.ItemID);

                var displaySize = String.Format(hardpoint.MinSize == hardpoint.MaxSize ? "({0})" : "({0} - {1})", hardpoint.MinSize, hardpoint.MaxSize);

                <li @item.HTML_Attributes data-droppable>

                    <label data-toggle="collapse" data-target="#@childId">@item.Port_DisplayName @displaySize</label>

                    @if (item.GameData_Item != null)
                    {
                        <span @item.HTML_Attributes>@item.Item_DisplayName (@item.ItemSize)</span>

                        @RenderHardpoints(item.Inventory_Item, childId)
                    }
                    else
                    {
                        <span>Empty</span>
                    }
                </li>
            }
        </ul>
    }
}

@using(Html.BeginForm("Ship", "HoloTable", new { id = Model.CurrentXML, shipID = Model.ShipID }, FormMethod.Post))
{
    <div class="row">

        <div class="col-lg-6 hidden-md hidden-sm">
            <h3>@Model.GameData_Ship.DisplayName.ToLocalized()</h3>
            <img src="http://placehold.it/800x600" alt="Hologram" width="100%" />
        </div>

        <div class="col-lg-3 col-md-6 col-xs-12">
            <!-- Nav tabs -->
            <ul class="nav nav-tabs" role="tablist">
                <li class="active"><a href="#loadout" role="tab" data-toggle="tab">Loadout</a></li>
                <li><a href="#systems" role="tab" data-toggle="tab">Systems</a></li>
            </ul>

            <!-- Tab panes -->
            <div class="tab-content">
                <div class="tab-pane active" id="loadout">
                    @{
                    var crewCount = Model.GameData_PartsMap[Model.ShipID].Where(p => p.ItemPorts != null).SelectMany(p => p.ItemPorts).Where(ip => ip.Types != null).SelectMany(ip => ip.Types).Where(t => t.Type == "Seat" || t.SubType == "MannedTurret").Count();
                    var shipMass = String.Format("{0:#,000}", Model.GameData_Ship.Parts[0].Mass);
                    var upgradeSlots = Model.View_Loadout.Select(i => i.GameData_EquippedPort.MaxSize).Sum() - Model.View_Loadout.Where(i => i.GameData_Item != null).Select(i => i.ItemSize).Sum();

                    <ul class="row list-unstyled holo-overview">
                        <li class="col-sm-4">
                            <div class="panel panel-default">
                                <div class="panel-heading"><h3>Max Crew</h3></div>
                                <div class="panel-body">
                                    <span>@crewCount</span>
                                    <label>Person/s</label>
                                </div>
                            </div>
                        </li>
                        <li class="col-sm-4">
                            <div class="panel panel-default">
                                <div class="panel-heading"><h3>Mass (empty)</h3></div>
                                <div class="panel-body">
                                    <span>@shipMass</span>
                                    <label>kg</label>
                                </div>
                            </div>
                        </li>
                        <li class="col-sm-4">
                            <div class="panel panel-default">
                                <div class="panel-heading"><h3>Upgrade Capacity</h3></div>
                                <div class="panel-body">
                                    <span>@upgradeSlots</span>
                                    <label>Slots</label>
                                </div>
                            </div>
                        </li>
                    </ul>
                    }

                    @{
                    var engines = Model.View_Loadout.Where(i => i.GameData_EquippedPort.Types.Any(t => t.Type == "MainThruster"));
                    var thrusters = Model.View_Loadout.Where(i => i.GameData_EquippedPort.Types.Any(t => t.Type == "ManneuverThruster"));

                    var enginesByMaxSize = engines.GroupBy(k => k.GameData_EquippedPort.MaxSize).ToDictionary(k => k.Key, v => v.ToList());
                    var enginesBySize = engines.Where(i => i.GameData_Item != null).GroupBy(k => k.GameData_Item.ItemSize).ToDictionary(k => k.Key, v => v.ToList());

                    var thrustersByMaxSize = thrusters.GroupBy(k => k.GameData_EquippedPort.MaxSize).ToDictionary(k => k.Key, v => v.ToList());
                    var thrustersBySize = thrusters.Where(i => i.GameData_Item != null).GroupBy(k => k.GameData_Item.ItemSize).ToDictionary(k => k.Key, v => v.ToList());

                    <div class="panel panel-default">
                        <div class="panel-heading"><h3>Propulsion</h3></div>
                        <div class="panel-body">
                            <ul class="list-unstyled">
                                @if (enginesByMaxSize.Count > 0)
                                {
                                    var engineMaxSize = enginesByMaxSize.Max(k => k.Key);

                                    <li class="row">
                                        <label class="col-md-6">Engines</label>
                                        <dl class="col-md-6 list-unstyled">
                                            <dl>
                                                @foreach (var size in Enumerable.Range(1, engineMaxSize).Reverse())
                                                {
                                                    var maxEngines = enginesByMaxSize.GetValue(size, new List<InventoryItem> { });
                                                    var sizeEngines = enginesBySize.GetValue(size, new List<InventoryItem> { });

                                                    if (maxEngines.Count + sizeEngines.Count > 0)
                                                    {
                                                        <dt>
                                                            <label>TR</label>
                                                            <span>@size</span>
                                                        </dt>
                                                        <dd>@sizeEngines.Count / @maxEngines.Count</dd>
                                                    }
                                                }
                                            </dl>
                                        </dl>
                                    </li>
                                }
                                @if (thrustersByMaxSize.Count > 0)
                                {
                                    var thrusterMaxSize = thrustersByMaxSize.Max(k => k.Key);

                                    <li class="row">
                                        <label class="col-md-6">Thrusters</label>
                                        <dl class="col-md-6">
                                            <dl>
                                                @foreach (var size in Enumerable.Range(1, thrusterMaxSize).Reverse())
                                                {
                                                    var maxThrusters = thrustersByMaxSize.GetValue(size, new List<InventoryItem> { });
                                                    var sizeThrusters = thrustersBySize.GetValue(size, new List<InventoryItem> { });

                                                    if (maxThrusters.Count + sizeThrusters.Count > 0)
                                                    {
                                                        <dt>
                                                            <label>TR</label>
                                                            <span>@size</span>
                                                        </dt>
                                                        <dd>@sizeThrusters.Count / @maxThrusters.Count</dd>
                                                    }
                                                }
                                            </dl>
                                        </dl>
                                    </li>
                                }
                                @if (thrustersByMaxSize.Count == 0 && enginesByMaxSize.Count == 0)
                                {
                                    <li class="alert alert-danger">Propulsion Offline</li>
                                }

                            </ul>
                        </div>
                    </div>
                    }

                    @{
                    var weaponTypes = new String[] { "Turret", "WeaponGun", "TurretBase" };
                    var ammoTypes = new String[] { "AmmoBox", "Ordinance" };
                    var weapons = Model.View_Loadout.Where(i => i.GameData_EquippedPort.Types.Select(t => t.Type).Intersect(weaponTypes).Any());
                    var racks = Model.View_Loadout.Where(i => i.GameData_EquippedPort.Types.Select(t => t.SubType).Any(t => t == "MissileRack"));

                    var weaponsByMaxSize = weapons.GroupBy(k => k.GameData_EquippedPort.MaxSize).ToDictionary(k => k.Key, v => v.ToList());
                    var racksByMaxSize = racks.GroupBy(k => k.GameData_EquippedPort.MaxSize).ToDictionary(k => k.Key, v => v.ToList());

                    if (weaponsByMaxSize.Count > 0)
                    {
                        <div class="panel panel-default">
                            <div class="panel-heading"><h3>Hardpoints</h3></div>
                            <div class="panel-body">
                                <ul class="list-unstyled">
                                    @foreach (var size in weaponsByMaxSize.Keys.OrderBy(k => k))
                                    {
                                        <li class="row">
                                            <label class="col-md-4">Size @size</label>
                                            <ul class="col-md-6">
                                                @foreach (var item in weaponsByMaxSize[size].OrderBy(i => i.ItemSize ?? 99))
                                                {
                                                    <li @item.HTML_Attributes title="@item.Port_DisplayName" data-droppable="true">
                                                        @(item.Item_DisplayName ?? "Empty")
                                                    </li>
                                                }
                                            </ul>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>
                    }

                    if (racksByMaxSize.Count > 0)
                    {
                        <div class="panel panel-default">
                            <div class="panel-heading"><h3>Missiles</h3></div>
                            <div class="panel-body">
                                <ul class="list-unstyled">
                                    @foreach (var size in racksByMaxSize.Keys.OrderBy(k => k))
                                    {
                                        <li class="row">
                                            <label class="col-md-4">Size @size</label>
                                            <ul class="col-md-6">
                                                @foreach (var item in racksByMaxSize[size].OrderBy(i => i.ItemSize ?? 99))
                                                {
                                                    <li @item.HTML_Attributes title="@item.Port_DisplayName" data-droppable="true">
                                                        @(item.Item_DisplayName ?? "Empty")
                                                    </li>
                                                }
                                            </ul>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>
                    }
                    }

                </div>
                <div class="tab-pane" id="systems">
                    <h3>Hardpoints</h3>

                    @RenderHardpoints(null, null, Items.CategoryEnum.__Empty__)

                    @RenderHardpoints(null, null, Items.CategoryEnum.Armor)
                    @RenderHardpoints(null, null, Items.CategoryEnum.Shield)

                    @RenderHardpoints(null, null, Items.CategoryEnum.PowerPlant)

                    @RenderHardpoints(null, null, Items.CategoryEnum.Storage)

                    @RenderHardpoints(null, null, Items.CategoryEnum.__Unknown__)
                </div>
            </div>
        </div>

        <div class="col-lg-3 col-md-6 hidden-xs">
            <!-- Nav tabs -->
            <ul class="nav nav-tabs" role="tablist">
                <li class="active"><a href="#weapons" role="tab" data-toggle="tab">Weapons</a></li>
                <li><a href="#shields" role="tab" data-toggle="tab">Shields</a></li>
                <li><a href="#missiles" role="tab" data-toggle="tab">Missiles</a></li>
            </ul>

            <!-- Tab panes -->
            <div class="tab-content">
                <div class="tab-pane active" id="weapons">
                    @RenderItemCategory("Turrets", Model.GameData_CategoryMap[Items.CategoryEnum.Turret])
                    @RenderItemCategory("Weapons", Model.GameData_CategoryMap[Items.CategoryEnum.Weapon])
                </div>
                <div class="tab-pane" id="shields">
                    @RenderItemCategory("Armor", Model.GameData_CategoryMap[Items.CategoryEnum.Armor])
                    @RenderItemCategory("Shields", Model.GameData_CategoryMap[Items.CategoryEnum.Shield])
                </div>
                <div class="tab-pane" id="missiles">
                    @RenderItemCategory("Missile Racks", Model.GameData_CategoryMap[Items.CategoryEnum.MissileRack])
                    @RenderItemCategory("Missiles", Model.GameData_CategoryMap[Items.CategoryEnum.Missile])
                </div>
            </div>
        </div>

    </div>
}

@section Scripts
{
    @*Scripts.Render("~/bundles/aframe")*@

    <script type="text/javascript">
        $(document).ready(function () {
            var debug = false;
            var $form = $('form');

            var acceptItem = function ($item) {
                var $port = $(this);

                // ensure we're always checking the item vs the port
                if (!$item.hasClass('js-available') && $port.hasClass('js-available')) {
                    var temp = $item;
                    $item = $port;
                    $port = temp;
                }

                if (!debug)
                { /* Check item sizes */
                    var itemSize = Number.parseInt($item.data('item-size'));
                    var minSize = Number.parseInt($port.data('port-min-size'));
                    var maxSize = Number.parseInt($port.data('port-max-size'));

                    if (itemSize < minSize || itemSize > maxSize)
                        return false;
                }

                if (!debug)
                { /* Normally, ship-specific tags */
                    var requiredPortTags = ($item.data('item-required-port-tags') || '').split(' ');
                    var portTags = ($port.data('port-tags') || '').split(' ');
                    var shipPortTags = ($port.data('ship-port-tags') || '').split(' ');

                    if ($(requiredPortTags).not(portTags).not(shipPortTags).not(['']).length > 0)
                        return false;
                }

                if (!debug)
                { /* Normally, equipment-specific tags */
                    var requiredItemTags = ($port.data('port-required-tags') || '').split(' ');
                    var itemTags = ($item.data('item-tags') || '').split(' ');

                    if ($(requiredItemTags).not(itemTags).not(['']).length > 0)
                        return false;
                }

                { /* Item types */
                    var type = $item.data('item-type');
                    var subType = $item.data('item-sub-type');
                    subType = (subType == "") ? type : (type + ":" + subType);

                    var accepted = ($port.data('port-types') || '').split(',');

                    for (var i = 0, j = accepted.length; i < j; i++) {
                        if (accepted[i] == type || accepted[i] == subType)
                            return true;
                    }
                }

                return false;
            }

            var bindAll = function (parent) {
                $("[data-draggable]:not(.js-equipped):not(.js-draggable)").addClass('js-draggable').draggable({
                    helper: "clone",
                    appendTo: "body"
                });

                $("[data-droppable]:not(.js-droppable)").addClass('js-droppable').droppable({
                    accept: acceptItem,
                    activeClass: "ui-state-default",
                    hoverClass: "ui-state-hover",
                    drop: dropItem
                });
            }

            var dropItem = function (event, ui) {

                var $item = $(event.toElement);
                var $port = $(event.target);

                if ($item.data('item-id') != null)
                    $item = $('[data-item-id="' + $item.data('item-id') + '"');

                if ($port.data('item-id') != null)
                    $port = $('[data-item-id="' + $port.data('item-id') + '"');

                // ensure we're always checking the item vs the port
                if (!$item.hasClass('js-available') && $port.hasClass('js-available')) {
                    var temp = $item;
                    $item = $port;
                    $port = temp;
                }

                var data = {
                    newPartID: $item.data('item-id'),
                    parentID: $port.data('parent-id'),
                    portName: $port.data('port-name')
                }

                $.ajax({
                    url: $form.href,
                    data: data,
                    method: "POST",
                    success: function (data) {
                        $itemPane = $item.closest('[id]');
                        $portPane = $port.closest('[id]');

                        $page = $(data);

                        console.log($itemPane[0].id, $portPane[0].id);
                        console.log($('#' + $itemPane[0].id, $page));
                        console.log($('#' + $portPane[0].id, $page));

                        $itemPane.replaceWith($('#' + $itemPane[0].id, $page));
                        $portPane.replaceWith($('#' + $portPane[0].id, $page));

                        bindAll(document.body);
                    }
                });
            }

            bindAll(document.body)
        });
    </script>
}